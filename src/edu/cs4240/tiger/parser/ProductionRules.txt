program → let declseg in stmts end
declseg → typedecls vardecls funcdecls
typedecls → ϵ
typedecls → typedecl typedecls
typedecl → type id := type ;
type → int
type → float
type → id
type → array [ intlit ] of type
vardecls → ϵ
vardecls → vardecl vardecls
vardecl → var ids : type optinit ;
ids → id ids_tail
ids_tail → ϵ
ids_tail → , ids
optinit → ϵ
optinit → := const
funcdecls → ϵ
funcdecls → funcdecl funcdecls
funcdecl → func id ( params ) optrettype begin stmts end ;
params → ϵ
params → neparams
neparams → param neparams_tail
neparams_tail → ϵ
neparams_tail → , neparams
param → id : type
optrettype → ϵ
optrettype → : type
stmts → fullstmt stmts_tail
stmts_tail → ϵ
stmts_tail → fullstmt stmts
fullstmt → stmt ;
stmt → lvalue := numexpr
stmt → if boolexpr then stmts
stmt_if → endif
stmt_if → else stmts endif
stmt → while boolexpr do stmts enddo
stmt → for id := numexpr to numexpr do stmts enddo
stmt → optstore id ( numexprs )
stmt → break
stmt → return numexpr
lvalue → id optoffset
optoffset → ϵ
optoffset → [ numexpr ]
optstore → ϵ
optstore → lvalue :=
numexprs → ϵ
numexprs → neexprs
neexprs → numexpr neexprs_tail
neexprs_tail → ϵ
neexprs_tail → , neexprs
boolexpr → clause boolexpr_tail
boolexpr_tail → ϵ
boolexpr_tail → | boolexpr
clause → pred clause_tail
clause_tail → ϵ
clause_tail → & clause
pred → numexpr boolop numexpr
pred → ( boolexpr )
boolop → =
boolop → <>
boolop → <=
boolop → >=
boolop → <
boolop → >
numexpr → term numexpr_tail
numexpr_tail → ϵ
numexpr_tail → linop numexpr
linop → +
linop → -
term → factor term_tail
term_tail → ϵ
term_tail → nonlinop term
nonlinop → *
nonlinop → /
factor → const
factor → id optoffset
factor → ( numexpr )
const → intlit
const → floatlit
